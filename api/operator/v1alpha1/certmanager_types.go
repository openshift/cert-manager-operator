package v1alpha1

import (
	apiv1 "github.com/openshift/api/operator/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CertManagerSpec defines the desired state of CertManager
type CertManagerSpec struct {
	apiv1.OperatorSpec `json:",inline"`

	// ControllerConfig specifies further customization options for the controller's deployment spec.
	//
	// Possible customizations include the following,
	//
	// For OverrideArgs,
	// This field appends values to .spec.template.spec.containers[...].args. The container
	// that will be selected will be based on image present on the spec. Possible values are,
	// Eg:
	//   - "--acme-http01-solver-nameservers="8.8.8.8:53,1.1.1.1:53"
	//   - "--dns01-recursive-nameservers=8.8.8.8:53,1.1.1.1:53"
	//   - "--dns01-recursive-nameservers-only"
	//
	// For OverrideEnvs,
	// This field appends values to .spec.template.spec.containers[...].env. The container
	// that will be selected will be based on image present on the spec. Possible values are,
	// Eg:
	//   - "HTTP_PROXY": "http://proxy:8080"
	//
	// +kubebuilder:validation:Optional
	// +optional
	ControllerConfig *DeploymentConfig `json:"controllerConfig,omitempty"`

	// WebhookConfig specifies further customization options for the webhook's deployment spec.
	//
	// Possible customizations include the following,
	//
	// For OverrideArgs,
	// --config string                                Path to a file containing a WebhookConfiguration object used to configure the webhook
	// --dynamic-serving-ca-secret-name string        name of the secret used to store the CA that signs serving certificates certificates
	// --dynamic-serving-ca-secret-namespace string   namespace of the secret used to store the CA that signs serving certificates
	// --dynamic-serving-dns-names strings            DNS names that should be present on certificates generated by the dynamic serving CA
	// --v Level                                      number for the log level verbosity
	//
	// +kubebuilder:validation:Optional
	// +optional
	WebhookConfig *DeploymentConfig `json:"webhookConfig,omitempty"`

	// CAInjectorConfig specifies further customization options for the cainjector's deployment spec.
	//
	// Possible customizations include the following,
	//
	// For OverrideArgs,
	// --namespace string                          If set, this limits the scope of cainjector to a single namespace. If set, cainjector
	//                                             will not update resources with certificates outside of the configured namespace.
	// --v Level                                   number for the log level verbosity
	//
	// +kubebuilder:validation:Optional
	// +optional
	CAInjectorConfig *DeploymentConfig `json:"cainjectorConfig,omitempty"`
}

// DeploymentConfig defines the schema for
// overriding deployment of cert-manager operands,
// namely the controller, webhook and cainjector.
type DeploymentConfig struct {

	// +kubebuilder:validation:Optional
	// +optional
	OverrideArgs []string `json:"overrideArgs,omitempty"`

	// +kubebuilder:validation:Optional
	// +optional
	OverrideEnv []corev1.EnvVar `json:"overrideEnv,omitempty"`

	// +kubebuilder:validation:Optional
	// +optional
	OverrideLabels map[string]string `json:"overrideLabels,omitempty"`

	// +kubebuilder:validation:Optional
	// +optional
	OverrideResources CertManagerResourceRequirements `json:"overrideResources,omitempty"`

	// OverrideReplicas defines the number of replicas for the operand deployment.
	// If not specified, the default replicas from the deployment manifest will be used.
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Minimum=1
	// +optional
	OverrideReplicas *int32 `json:"overrideReplicas,omitempty"`

	// +kubebuilder:validation:Optional
	// +optional
	OverrideScheduling CertManagerScheduling `json:"overrideScheduling,omitempty"`
}

// CertManagerResourceRequirements describes the compute resource requirements for the cert-manager operands,
// namely the controller, webhook and cainjector.
type CertManagerResourceRequirements struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Limits corev1.ResourceList `json:"limits,omitempty" protobuf:"bytes,1,rep,name=limits,casttype=ResourceList,castkey=ResourceName"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Requests corev1.ResourceList `json:"requests,omitempty" protobuf:"bytes,2,rep,name=requests,casttype=ResourceList,castkey=ResourceName"`
}

// CertManagerScheduling describes the scheduling configurations for the cert-manager operands,
// namely the controller, webhook and cainjector.
type CertManagerScheduling struct {
	// NodeSelector is a selector which must be true for the pod to fit on a node.
	// Selector which must match a node's labels for the pod to be scheduled on that node.
	// More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	// +optional
	// +mapType=atomic
	NodeSelector map[string]string `json:"nodeSelector,omitempty" protobuf:"bytes,7,rep,name=nodeSelector"`

	// Tolerations are attached to the pod to tolerate any taint that matches the
	// taint's key, value and effect using the toleration's matching operator.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
	// +optional
	// +listType=atomic
	Tolerations []corev1.Toleration `json:"tolerations,omitempty" protobuf:"bytes,22,opt,name=tolerations"`
}

// CertManagerStatus defines the observed state of CertManager
type CertManagerStatus struct {
	apiv1.OperatorStatus `json:",inline"`
}

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:resource:scope=Cluster

// CertManager is the Schema for the certmanagers API
// +operator-sdk:csv:customresourcedefinitions:displayName="CertManager"
type CertManager struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	// +required
	Spec CertManagerSpec `json:"spec,omitempty"`
	// +optional
	Status CertManagerStatus `json:"status,omitempty"`
}

type UnsupportedConfigOverrides struct {
	Controller UnsupportedConfigOverridesForCertManagerController `json:"controller,omitempty"`
	Webhook    UnsupportedConfigOverridesForCertManagerWebhook    `json:"webhook,omitempty"`
	CAInjector UnsupportedConfigOverridesForCertManagerCAInjector `json:"cainjector,omitempty"`
}

type UnsupportedConfigOverridesForCertManagerController struct {
	Args []string `json:"args,omitempty"`
}

type UnsupportedConfigOverridesForCertManagerWebhook struct {
	Args []string `json:"args,omitempty"`
}

type UnsupportedConfigOverridesForCertManagerCAInjector struct {
	Args []string `json:"args,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
//+kubebuilder:object:root=true

// CertManagerList contains a list of CertManager
type CertManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []CertManager `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CertManager{}, &CertManagerList{})
}
