// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cert-manager-operator/api/operator/v1alpha1"
	operatorv1alpha1 "github.com/openshift/cert-manager-operator/pkg/operator/applyconfigurations/operator/v1alpha1"
	typedoperatorv1alpha1 "github.com/openshift/cert-manager-operator/pkg/operator/clientset/versioned/typed/operator/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeHTTP01Proxies implements HTTP01ProxyInterface
type fakeHTTP01Proxies struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.HTTP01Proxy, *v1alpha1.HTTP01ProxyList, *operatorv1alpha1.HTTP01ProxyApplyConfiguration]
	Fake *FakeOperatorV1alpha1
}

func newFakeHTTP01Proxies(fake *FakeOperatorV1alpha1, namespace string) typedoperatorv1alpha1.HTTP01ProxyInterface {
	return &fakeHTTP01Proxies{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.HTTP01Proxy, *v1alpha1.HTTP01ProxyList, *operatorv1alpha1.HTTP01ProxyApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("http01proxies"),
			v1alpha1.SchemeGroupVersion.WithKind("HTTP01Proxy"),
			func() *v1alpha1.HTTP01Proxy { return &v1alpha1.HTTP01Proxy{} },
			func() *v1alpha1.HTTP01ProxyList { return &v1alpha1.HTTP01ProxyList{} },
			func(dst, src *v1alpha1.HTTP01ProxyList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.HTTP01ProxyList) []*v1alpha1.HTTP01Proxy {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.HTTP01ProxyList, items []*v1alpha1.HTTP01Proxy) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
