// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cert-manager-operator/api/operator/v1alpha1"
	operatorv1alpha1 "github.com/openshift/cert-manager-operator/pkg/operator/applyconfigurations/operator/v1alpha1"
	typedoperatorv1alpha1 "github.com/openshift/cert-manager-operator/pkg/operator/clientset/versioned/typed/operator/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeCertManagers implements CertManagerInterface
type fakeCertManagers struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.CertManager, *v1alpha1.CertManagerList, *operatorv1alpha1.CertManagerApplyConfiguration]
	Fake *FakeOperatorV1alpha1
}

func newFakeCertManagers(fake *FakeOperatorV1alpha1) typedoperatorv1alpha1.CertManagerInterface {
	return &fakeCertManagers{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.CertManager, *v1alpha1.CertManagerList, *operatorv1alpha1.CertManagerApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("certmanagers"),
			v1alpha1.SchemeGroupVersion.WithKind("CertManager"),
			func() *v1alpha1.CertManager { return &v1alpha1.CertManager{} },
			func() *v1alpha1.CertManagerList { return &v1alpha1.CertManagerList{} },
			func(dst, src *v1alpha1.CertManagerList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.CertManagerList) []*v1alpha1.CertManager {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.CertManagerList, items []*v1alpha1.CertManager) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
