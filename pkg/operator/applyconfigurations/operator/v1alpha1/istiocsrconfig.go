// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// IstioCSRConfigApplyConfiguration represents a declarative configuration of the IstioCSRConfig type for use
// with apply.
type IstioCSRConfigApplyConfiguration struct {
	LogLevel        *int32                               `json:"logLevel,omitempty"`
	LogFormat       *string                              `json:"logFormat,omitempty"`
	CertManager     *CertManagerConfigApplyConfiguration `json:"certManager,omitempty"`
	IstiodTLSConfig *IstiodTLSConfigApplyConfiguration   `json:"istiodTLSConfig,omitempty"`
	Server          *ServerConfigApplyConfiguration      `json:"server,omitempty"`
	Istio           *IstioConfigApplyConfiguration       `json:"istio,omitempty"`
	Resources       *v1.ResourceRequirements             `json:"resources,omitempty"`
	Affinity        *v1.Affinity                         `json:"affinity,omitempty"`
	Tolerations     []v1.Toleration                      `json:"tolerations,omitempty"`
	NodeSelector    map[string]string                    `json:"nodeSelector,omitempty"`
}

// IstioCSRConfigApplyConfiguration constructs a declarative configuration of the IstioCSRConfig type for use with
// apply.
func IstioCSRConfig() *IstioCSRConfigApplyConfiguration {
	return &IstioCSRConfigApplyConfiguration{}
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithLogLevel(value int32) *IstioCSRConfigApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithLogFormat sets the LogFormat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogFormat field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithLogFormat(value string) *IstioCSRConfigApplyConfiguration {
	b.LogFormat = &value
	return b
}

// WithCertManager sets the CertManager field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertManager field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithCertManager(value *CertManagerConfigApplyConfiguration) *IstioCSRConfigApplyConfiguration {
	b.CertManager = value
	return b
}

// WithIstiodTLSConfig sets the IstiodTLSConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IstiodTLSConfig field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithIstiodTLSConfig(value *IstiodTLSConfigApplyConfiguration) *IstioCSRConfigApplyConfiguration {
	b.IstiodTLSConfig = value
	return b
}

// WithServer sets the Server field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Server field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithServer(value *ServerConfigApplyConfiguration) *IstioCSRConfigApplyConfiguration {
	b.Server = value
	return b
}

// WithIstio sets the Istio field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Istio field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithIstio(value *IstioConfigApplyConfiguration) *IstioCSRConfigApplyConfiguration {
	b.Istio = value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithResources(value v1.ResourceRequirements) *IstioCSRConfigApplyConfiguration {
	b.Resources = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *IstioCSRConfigApplyConfiguration) WithAffinity(value v1.Affinity) *IstioCSRConfigApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *IstioCSRConfigApplyConfiguration) WithTolerations(values ...v1.Toleration) *IstioCSRConfigApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *IstioCSRConfigApplyConfiguration) WithNodeSelector(entries map[string]string) *IstioCSRConfigApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}
