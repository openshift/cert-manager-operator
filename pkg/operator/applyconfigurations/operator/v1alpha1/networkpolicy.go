// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	operatorv1alpha1 "github.com/openshift/cert-manager-operator/api/operator/v1alpha1"
	v1 "k8s.io/api/networking/v1"
)

// NetworkPolicyApplyConfiguration represents a declarative configuration of the NetworkPolicy type for use
// with apply.
type NetworkPolicyApplyConfiguration struct {
	Name          *string                         `json:"name,omitempty"`
	ComponentName *operatorv1alpha1.ComponentName `json:"componentName,omitempty"`
	Egress        []v1.NetworkPolicyEgressRule    `json:"egress,omitempty"`
}

// NetworkPolicyApplyConfiguration constructs a declarative configuration of the NetworkPolicy type for use with
// apply.
func NetworkPolicy() *NetworkPolicyApplyConfiguration {
	return &NetworkPolicyApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NetworkPolicyApplyConfiguration) WithName(value string) *NetworkPolicyApplyConfiguration {
	b.Name = &value
	return b
}

// WithComponentName sets the ComponentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComponentName field is set to the value of the last call.
func (b *NetworkPolicyApplyConfiguration) WithComponentName(value operatorv1alpha1.ComponentName) *NetworkPolicyApplyConfiguration {
	b.ComponentName = &value
	return b
}

// WithEgress adds the given value to the Egress field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Egress field.
func (b *NetworkPolicyApplyConfiguration) WithEgress(values ...v1.NetworkPolicyEgressRule) *NetworkPolicyApplyConfiguration {
	for i := range values {
		b.Egress = append(b.Egress, values[i])
	}
	return b
}
