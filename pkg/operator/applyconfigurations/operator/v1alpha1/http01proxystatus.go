// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// HTTP01ProxyStatusApplyConfiguration represents a declarative configuration of the HTTP01ProxyStatus type for use
// with apply.
type HTTP01ProxyStatusApplyConfiguration struct {
	ConditionalStatusApplyConfiguration `json:",omitempty,inline"`
	ActiveChallenges                    *int32  `json:"activeChallenges,omitempty"`
	LastError                           *string `json:"lastError,omitempty"`
}

// HTTP01ProxyStatusApplyConfiguration constructs a declarative configuration of the HTTP01ProxyStatus type for use with
// apply.
func HTTP01ProxyStatus() *HTTP01ProxyStatusApplyConfiguration {
	return &HTTP01ProxyStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *HTTP01ProxyStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *HTTP01ProxyStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.ConditionalStatusApplyConfiguration.Conditions = append(b.ConditionalStatusApplyConfiguration.Conditions, *values[i])
	}
	return b
}

// WithActiveChallenges sets the ActiveChallenges field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActiveChallenges field is set to the value of the last call.
func (b *HTTP01ProxyStatusApplyConfiguration) WithActiveChallenges(value int32) *HTTP01ProxyStatusApplyConfiguration {
	b.ActiveChallenges = &value
	return b
}

// WithLastError sets the LastError field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastError field is set to the value of the last call.
func (b *HTTP01ProxyStatusApplyConfiguration) WithLastError(value string) *HTTP01ProxyStatusApplyConfiguration {
	b.LastError = &value
	return b
}
