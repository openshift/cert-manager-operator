// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// DeploymentConfigApplyConfiguration represents a declarative configuration of the DeploymentConfig type for use
// with apply.
type DeploymentConfigApplyConfiguration struct {
	OverrideArgs       []string                                           `json:"overrideArgs,omitempty"`
	OverrideEnv        []v1.EnvVar                                        `json:"overrideEnv,omitempty"`
	OverrideLabels     map[string]string                                  `json:"overrideLabels,omitempty"`
	OverrideResources  *CertManagerResourceRequirementsApplyConfiguration `json:"overrideResources,omitempty"`
	OverrideScheduling *CertManagerSchedulingApplyConfiguration           `json:"overrideScheduling,omitempty"`
}

// DeploymentConfigApplyConfiguration constructs a declarative configuration of the DeploymentConfig type for use with
// apply.
func DeploymentConfig() *DeploymentConfigApplyConfiguration {
	return &DeploymentConfigApplyConfiguration{}
}

// WithOverrideArgs adds the given value to the OverrideArgs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OverrideArgs field.
func (b *DeploymentConfigApplyConfiguration) WithOverrideArgs(values ...string) *DeploymentConfigApplyConfiguration {
	for i := range values {
		b.OverrideArgs = append(b.OverrideArgs, values[i])
	}
	return b
}

// WithOverrideEnv adds the given value to the OverrideEnv field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OverrideEnv field.
func (b *DeploymentConfigApplyConfiguration) WithOverrideEnv(values ...v1.EnvVar) *DeploymentConfigApplyConfiguration {
	for i := range values {
		b.OverrideEnv = append(b.OverrideEnv, values[i])
	}
	return b
}

// WithOverrideLabels puts the entries into the OverrideLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the OverrideLabels field,
// overwriting an existing map entries in OverrideLabels field with the same key.
func (b *DeploymentConfigApplyConfiguration) WithOverrideLabels(entries map[string]string) *DeploymentConfigApplyConfiguration {
	if b.OverrideLabels == nil && len(entries) > 0 {
		b.OverrideLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.OverrideLabels[k] = v
	}
	return b
}

// WithOverrideResources sets the OverrideResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OverrideResources field is set to the value of the last call.
func (b *DeploymentConfigApplyConfiguration) WithOverrideResources(value *CertManagerResourceRequirementsApplyConfiguration) *DeploymentConfigApplyConfiguration {
	b.OverrideResources = value
	return b
}

// WithOverrideScheduling sets the OverrideScheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OverrideScheduling field is set to the value of the last call.
func (b *DeploymentConfigApplyConfiguration) WithOverrideScheduling(value *CertManagerSchedulingApplyConfiguration) *DeploymentConfigApplyConfiguration {
	b.OverrideScheduling = value
	return b
}
