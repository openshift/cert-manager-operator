// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	operatorv1 "github.com/openshift/api/operator/v1"
	v1 "github.com/openshift/client-go/operator/applyconfigurations/operator/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CertManagerSpecApplyConfiguration represents a declarative configuration of the CertManagerSpec type for use
// with apply.
type CertManagerSpecApplyConfiguration struct {
	v1.OperatorSpecApplyConfiguration `json:",inline"`
	ControllerConfig                  *DeploymentConfigApplyConfiguration `json:"controllerConfig,omitempty"`
	WebhookConfig                     *DeploymentConfigApplyConfiguration `json:"webhookConfig,omitempty"`
	CAInjectorConfig                  *DeploymentConfigApplyConfiguration `json:"cainjectorConfig,omitempty"`
}

// CertManagerSpecApplyConfiguration constructs a declarative configuration of the CertManagerSpec type for use with
// apply.
func CertManagerSpec() *CertManagerSpecApplyConfiguration {
	return &CertManagerSpecApplyConfiguration{}
}

// WithManagementState sets the ManagementState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManagementState field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithManagementState(value operatorv1.ManagementState) *CertManagerSpecApplyConfiguration {
	b.OperatorSpecApplyConfiguration.ManagementState = &value
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithLogLevel(value operatorv1.LogLevel) *CertManagerSpecApplyConfiguration {
	b.OperatorSpecApplyConfiguration.LogLevel = &value
	return b
}

// WithOperatorLogLevel sets the OperatorLogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OperatorLogLevel field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithOperatorLogLevel(value operatorv1.LogLevel) *CertManagerSpecApplyConfiguration {
	b.OperatorSpecApplyConfiguration.OperatorLogLevel = &value
	return b
}

// WithUnsupportedConfigOverrides sets the UnsupportedConfigOverrides field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnsupportedConfigOverrides field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithUnsupportedConfigOverrides(value runtime.RawExtension) *CertManagerSpecApplyConfiguration {
	b.OperatorSpecApplyConfiguration.UnsupportedConfigOverrides = &value
	return b
}

// WithObservedConfig sets the ObservedConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedConfig field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithObservedConfig(value runtime.RawExtension) *CertManagerSpecApplyConfiguration {
	b.OperatorSpecApplyConfiguration.ObservedConfig = &value
	return b
}

// WithControllerConfig sets the ControllerConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerConfig field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithControllerConfig(value *DeploymentConfigApplyConfiguration) *CertManagerSpecApplyConfiguration {
	b.ControllerConfig = value
	return b
}

// WithWebhookConfig sets the WebhookConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WebhookConfig field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithWebhookConfig(value *DeploymentConfigApplyConfiguration) *CertManagerSpecApplyConfiguration {
	b.WebhookConfig = value
	return b
}

// WithCAInjectorConfig sets the CAInjectorConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CAInjectorConfig field is set to the value of the last call.
func (b *CertManagerSpecApplyConfiguration) WithCAInjectorConfig(value *DeploymentConfigApplyConfiguration) *CertManagerSpecApplyConfiguration {
	b.CAInjectorConfig = value
	return b
}
