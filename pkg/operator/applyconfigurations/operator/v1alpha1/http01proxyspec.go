// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// HTTP01ProxySpecApplyConfiguration represents a declarative configuration of the HTTP01ProxySpec type for use
// with apply.
type HTTP01ProxySpecApplyConfiguration struct {
	Enabled           *bool                               `json:"enabled,omitempty"`
	AllowedNamespaces *v1.LabelSelectorApplyConfiguration `json:"allowedNamespaces,omitempty"`
	CleanupTTLSeconds *int32                              `json:"cleanupTTLSeconds,omitempty"`
	ControllerConfig  *ControllerConfigApplyConfiguration `json:"controllerConfig,omitempty"`
}

// HTTP01ProxySpecApplyConfiguration constructs a declarative configuration of the HTTP01ProxySpec type for use with
// apply.
func HTTP01ProxySpec() *HTTP01ProxySpecApplyConfiguration {
	return &HTTP01ProxySpecApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *HTTP01ProxySpecApplyConfiguration) WithEnabled(value bool) *HTTP01ProxySpecApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithAllowedNamespaces sets the AllowedNamespaces field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowedNamespaces field is set to the value of the last call.
func (b *HTTP01ProxySpecApplyConfiguration) WithAllowedNamespaces(value *v1.LabelSelectorApplyConfiguration) *HTTP01ProxySpecApplyConfiguration {
	b.AllowedNamespaces = value
	return b
}

// WithCleanupTTLSeconds sets the CleanupTTLSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CleanupTTLSeconds field is set to the value of the last call.
func (b *HTTP01ProxySpecApplyConfiguration) WithCleanupTTLSeconds(value int32) *HTTP01ProxySpecApplyConfiguration {
	b.CleanupTTLSeconds = &value
	return b
}

// WithControllerConfig sets the ControllerConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerConfig field is set to the value of the last call.
func (b *HTTP01ProxySpecApplyConfiguration) WithControllerConfig(value *ControllerConfigApplyConfiguration) *HTTP01ProxySpecApplyConfiguration {
	b.ControllerConfig = value
	return b
}
