// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1alpha1 "github.com/openshift/cert-manager-operator/api/operator/v1alpha1"
	internal "github.com/openshift/cert-manager-operator/pkg/operator/applyconfigurations/internal"
	operatorv1alpha1 "github.com/openshift/cert-manager-operator/pkg/operator/applyconfigurations/operator/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=operator.openshift.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("CertManager"):
		return &operatorv1alpha1.CertManagerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CertManagerConfig"):
		return &operatorv1alpha1.CertManagerConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CertManagerResourceRequirements"):
		return &operatorv1alpha1.CertManagerResourceRequirementsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CertManagerScheduling"):
		return &operatorv1alpha1.CertManagerSchedulingApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CertManagerSpec"):
		return &operatorv1alpha1.CertManagerSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CertManagerStatus"):
		return &operatorv1alpha1.CertManagerStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ConditionalStatus"):
		return &operatorv1alpha1.ConditionalStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ConfigMapReference"):
		return &operatorv1alpha1.ConfigMapReferenceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ControllerConfig"):
		return &operatorv1alpha1.ControllerConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DeploymentConfig"):
		return &operatorv1alpha1.DeploymentConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IstioConfig"):
		return &operatorv1alpha1.IstioConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IstioCSR"):
		return &operatorv1alpha1.IstioCSRApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IstioCSRConfig"):
		return &operatorv1alpha1.IstioCSRConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IstioCSRSpec"):
		return &operatorv1alpha1.IstioCSRSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IstioCSRStatus"):
		return &operatorv1alpha1.IstioCSRStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IstiodTLSConfig"):
		return &operatorv1alpha1.IstiodTLSConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ServerConfig"):
		return &operatorv1alpha1.ServerConfigApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
